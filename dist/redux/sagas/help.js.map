{"version":3,"sources":["../../../src/redux/sagas/help.js"],"names":["root","talkToHumanAction","watchTalkToHumanAction","require","config","transporter","nodemailer","createTransport","service","auth","user","process","env","EMAIL_SENT","pass","EMAIL_PASSWORD","mailOptions","from","to","botConfig","contactEmail","subject","text","sendMail","error","console","log","session","TALK_HUMAN"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCyBA,I,CArCzB,6CACA,wC,uDACA,0DACA,yDACA,sD,qMAYUC,iB,kDAgBAC,sB,kDAKeF,I,EA/BzBG,QAAQ,QAAR,EAAkBC,MAAlB,GAEA,IAAMC,cAAcC,qBAAWC,eAAX,CAA2B,EAC7CC,SAAS,OADoC,EAE7CC,MAAM,EACJC,MAAMC,QAAQC,GAAR,CAAYC,UADd,EAEJC,MAAMH,QAAQC,GAAR,CAAYG,cAFd,EAFuC,EAA3B,CAApB,CAQA,SAAUd,iBAAV,oJACQe,WADR,GACsB,EAClBC,MAAMN,QAAQC,GAAR,CAAYC,UADA,EAElBK,IAAIC,oBAAUC,YAFI,EAGlBC,SAAS,wCAHS,EAIlBC,MAAM,0EAJY,EADtB,CAOEjB,YAAYkB,QAAZ,CAAqBP,WAArB,EAAkC,UAACQ,KAAD,EAAW,CAC3C,IAAIA,KAAJ,EAAW,CACTC,QAAQC,GAAR,CAAYF,KAAZ,EACD,CACF,CAJD,EAPF,yBAYQ,kBAAI,gCAAY,oBAAZ,CAAJ,CAZR,+D,CAeA;AACA,SAAUtB,sBAAV,CAAiCyB,OAAjC,qKACQ,wBAAUC,uBAAV,EAAsB3B,iBAAtB,EAAyC0B,OAAzC,CADR,iE,CAIA;AACe,SAAU3B,IAAV,CAAe2B,OAAf,mJACP,CACJ,mBAAKzB,sBAAL,EAA6ByB,OAA7B,CADI,CADO","file":"help.js","sourcesContent":["import { put, takeEvery, fork } from 'redux-saga/effects';\nimport nodemailer from 'nodemailer';\nimport { TALK_HUMAN } from '../../constants/actionTypes';\nimport { sendMessage } from '../actions/dialogActions';\nimport botConfig from '../../constants/botConfig';\n\nrequire('dotenv').config();\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: process.env.EMAIL_SENT,\n    pass: process.env.EMAIL_PASSWORD,\n  },\n});\n\nfunction* talkToHumanAction() {\n  const mailOptions = {\n    from: process.env.EMAIL_SENT,\n    to: botConfig.contactEmail,\n    subject: 'Chopibot - Requiere de tu intervension',\n    text: 'Revisa las conversaciones, un usuario ha solicitado intervenciÃ³n humana.',\n  };\n  transporter.sendMail(mailOptions, (error) => {\n    if (error) {\n      console.log(error);\n    }\n  });\n  yield put(sendMessage('help_human_success'));\n}\n\n// Action watcher\nfunction* watchTalkToHumanAction(session) {\n  yield takeEvery(TALK_HUMAN, talkToHumanAction, session);\n}\n\n// Export sagas\nexport default function* root(session) {\n  yield [\n    fork(watchTalkToHumanAction, session),\n  ];\n}\n"]}