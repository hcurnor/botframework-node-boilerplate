{"version":3,"sources":["../../../src/redux/sagas/product.js"],"names":["root","builder","localProducts","productInfoAction","watchProductInfoAction","session","action","entities","payload","expectedEntities","length","query","Object","forEach","expectedEntity","objectEntity","_","find","entity","type","toLowerCase","product","infoRequested","value","productObj","optionsArray","productValue","property","Array","isArray","valueExist","objectValues","attachment","HeroCard","title","subtitle","subTitle","text","description","images","CardImage","create","image","buttons","CardAction","imBack","PRODUCT_INFO"],"mappings":"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","file":"product.js","sourcesContent":["import _ from 'lodash';\nimport * as builder from 'botbuilder';\n\nimport { put, takeEvery, fork } from 'redux-saga/effects';\nimport { PRODUCT_INFO } from '../../constants/actionTypes';\nimport { sendMessage } from '../actions/dialogActions';\n\n// static data about products & bot info\nimport * as localProducts from '../../constants/products.json';\n\n// IMPORTANT: Arly phase 2.0\n// TODO: change local products to the GraphQL JS online store products & Inventory\n// Using constants/products.js file instead.\n\n// Actions\nfunction* productInfoAction(session, action) {\n  // LUIS entities\n  const { entities } = action.payload;\n  const expectedEntities = ['product', 'infoRequested', 'value'];\n  // Format Luis response (entety.value)\n  if (entities && entities.length > 0) {\n    const query = new Object();\n    expectedEntities.forEach((expectedEntity) => {\n      const objectEntity = _.find(entities, entity => entity.type === expectedEntity);\n      if (objectEntity) {\n        query[expectedEntity] = objectEntity.entity.toLowerCase();\n      }\n    });\n    const { product, infoRequested, value } = query;\n    // Final object from store\n    const productObj = product ? localProducts[product] : null;\n    if (productObj) {\n      const optionsArray = infoRequested ? productObj[infoRequested] : null;\n      const productValue = value && optionsArray\n        ? optionsArray.find(property => property === value) : null;\n\n      if (Array.isArray(optionsArray) && productValue) {\n        // The property exist in optionsArray and is array like \"colors, size\"\n        const valueExist = _.find(optionsArray, objectValues => objectValues === productValue);\n\n        if (valueExist) {\n          // Add image as attachment if exist\n          const attachment = [\n            new builder.HeroCard(session)\n              .title(productObj.title || '')\n              .subtitle(productObj.subTitle || '')\n              .text(productObj.description || '')\n              .images([builder.CardImage.create(session, productObj.image || '')])\n              .buttons([\n                builder.CardAction.imBack(session, 'Si, quiero comprar.', 'Comprar'),\n              ]),\n          ];\n\n          yield put(sendMessage('product_property_found', [product, infoRequested, value], attachment));\n          yield put(sendMessage('product_call_to_action'));\n        } else {\n          // Property not found in the product\n          yield put(sendMessage('product_property_not_found', [product, infoRequested, value]));\n        }\n      } else if (optionsArray && !productValue) {\n        // The property exist like \"color, size\" but is missing the value to compare\n        yield put(sendMessage('product_value_missing', [infoRequested]));\n      } else if (!optionsArray && productValue) {\n        yield put(sendMessage('product_missing_info', [product, value]));\n      } else {\n        yield put(sendMessage('product_error', [product]));\n      }\n    } else {\n      // Fail to detect entities - LUIS\n      yield put(sendMessage('product_entities_error'));\n    }\n  } else {\n    // Fail to detect product\n    yield put(sendMessage('product_missing'));\n  }\n}\n\n// Action watcher\nfunction* watchProductInfoAction(session) {\n  yield takeEvery(PRODUCT_INFO, productInfoAction, session);\n}\n\n// Export sagas\nexport default function* root(session) {\n  yield [\n    fork(watchProductInfoAction, session),\n  ];\n}\n"]}