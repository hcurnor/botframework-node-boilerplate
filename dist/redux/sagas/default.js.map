{"version":3,"sources":["../../../src/redux/sagas/default.js"],"names":["root","receiveMessageAction","watchReceiveMessageAction","getDialog","state","dialog","action","text","payload","changeCityMatch","exec","currentCityMatch","resetMatch","endConversationMatch","city","username","newCity","messageText","trim","encodeURIComponent","RECEIVE_MESSAGE","session"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEyBA,I,CAjEzB,6CAMA,yEACA,0DACA,yD,mDAWUC,oB,kDAwCAC,yB,kDAMeF,I,GAnDzB;AACO,IAAMG,gCAAY,SAAZA,SAAY,gBAASC,MAAMC,MAAf,EAAlB,C,CAEP;AAEA,SAAUJ,oBAAV,CAA+BK,MAA/B,uQACUC,IADV,GACmBD,OAAOE,OAD1B,CACUD,IADV,CAEQE,eAFR,GAE0B,wBAAwBC,IAAxB,CAA6BH,IAA7B,CAF1B,CAGQI,gBAHR,GAG2B,iBAAiBD,IAAjB,CAAsBH,IAAtB,CAH3B,CAIQK,UAJR,GAIqB,UAAUF,IAAV,CAAeH,IAAf,CAJrB,CAKQM,oBALR,GAK+B,qBAAqBH,IAArB,CAA0BH,IAA1B,CAL/B,0BAMuB,qBAAOJ,SAAP,CANvB,6BAMQW,IANR,QAMQA,IANR,2BAO6B,qBAAOX,SAAP,CAP7B,+BAOUY,QAPV,SAOUA,QAPV,KASOD,IATP,6BAUIA,OAAO,SAAP,CAVJ,0BAYU,kBAAI,oCAAQA,IAAR,CAAJ,CAZV,mCAaU,kBAAI,uHAAgGA,IAAhG,CAAJ,CAbV,mCAcU,kBAAI,+BAAW,+CAAX,CAAJ,CAdV,8CAecC,QAfd,uDAgBU,kBAAI,wCAAYR,IAAZ,CAAJ,CAhBV,mCAiBU,kBAAI,6CAAuBA,IAAvB,uPAAJ,CAjBV,+CAkBaE,eAlBb,6BAmBUO,OAnBV,GAmBoBP,gBAAgB,CAAhB,CAnBpB,2BAqBU,kBAAI,oCAAQO,OAAR,CAAJ,CArBV,mCAsBU,kBAAI,6CAAuBD,QAAvB,6DAAuFC,OAAvF,OAAJ,CAtBV,+CAuBaL,gBAvBb,uDAwBU,kBAAI,yCAAmBI,QAAnB,4DAAiFD,IAAjF,OAAJ,CAxBV,+CAyBaF,UAzBb,uDA0BU,kBAAI,mCAAJ,CA1BV,mCA2BU,kBAAI,gCAAY,8CAAZ,CAAJ,CA3BV,+CA4BaC,oBA5Bb,uDA6BU,kBAAI,qCAAJ,CA7BV,mCA8BU,kBAAI,gCAAY,wBAAZ,CAAJ,CA9BV,0CAgCUI,WAhCV,GAgCwBX,OAAOE,OAAP,CAAeD,IAAf,CAAoBW,IAApB,EAhCxB,2BAkCU,kBAAI,gCAAeH,QAAf,8CAA+DE,WAA/D,gBAAmFH,IAAnF,WAAJ,CAlCV,mCAmCU,kBAAI,mEAA6CK,mBAAsBF,WAAtB,YAAwCH,IAAxC,CAA7C,CAAJ,CAnCV,gE,CAuCA;AACA,SAAUZ,yBAAV,yKACQ,wBAAUkB,4BAAV,EAA2BnB,oBAA3B,CADR,iE,CAIA;AAEe,SAAUD,IAAV,CAAeqB,OAAf,mJACP,CACJ,mBAAKnB,yBAAL,EAAgCmB,OAAhC,CADI,CADO","file":"default.js","sourcesContent":["import {\n  put,\n  select,\n  takeEvery,\n  fork,\n} from 'redux-saga/effects';\nimport { reset, setCity, setUsername } from '../actions/conversationalActions';\nimport { RECEIVE_MESSAGE } from '../../constants/actionTypes';\nimport {\n  promptText,\n  sendMessage,\n  endConversation,\n} from '../actions/dialogActions';\n\n// Since using multiple reducers to acces dialog\nexport const getDialog = state => state.dialog;\n\n// Actions\n\nfunction* receiveMessageAction(action) {\n  const { text } = action.payload;\n  const changeCityMatch = /^change city to (.*)/i.exec(text);\n  const currentCityMatch = /^current city/i.exec(text);\n  const resetMatch = /^reset/i.exec(text);\n  const endConversationMatch = /^end conversation/i.exec(text);\n  let { city } = yield select(getDialog);\n  const { username } = yield select(getDialog);\n\n  if (!city) {\n    city = 'Seattle';\n\n    yield put(setCity(city));\n    yield put(sendMessage(`Welcome to the Search City bot. I'm currently configured to search for things in ${city}`));\n    yield put(promptText('Before get started, please tell me your name?'));\n  } else if (!username) {\n    yield put(setUsername(text));\n    yield put(sendMessage(`Welcome ${text}!\\n * If you want to know which city I'm using for my searches type 'current city'. \\n * Want to change the current city? Type 'change city to cityName'. \\n * Want to change it just for your searches? Type 'change my city to cityName'`));\n  } else if (changeCityMatch) {\n    const newCity = changeCityMatch[1];\n\n    yield put(setCity(newCity));\n    yield put(sendMessage(`All set ${username}. From now on, all my searches will be for things in ${newCity}.`));\n  } else if (currentCityMatch) {\n    yield put(sendMessage(`Hey ${username}, I'm currently configured to search for things in ${city}.`));\n  } else if (resetMatch) {\n    yield put(reset());\n    yield put(sendMessage('Oops... I\\'m suffering from a memory loss...'));\n  } else if (endConversationMatch) {\n    yield put(endConversation());\n    yield put(sendMessage('Ending Conversation...'));\n  } else {\n    const messageText = action.payload.text.trim();\n\n    yield put(sendMessage(`${username}, wait a few seconds. Searching for '${messageText}' in '${city}'...`));\n    yield put(sendMessage(`https://www.bing.com/search?q=${encodeURIComponent(`${messageText} in ${city}`)}`));\n  }\n}\n\n// Action watcher\nfunction* watchReceiveMessageAction() {\n  yield takeEvery(RECEIVE_MESSAGE, receiveMessageAction);\n}\n\n// Export sagas\n\nexport default function* root(session) {\n  yield [\n    fork(watchReceiveMessageAction, session),\n  ];\n}\n"]}