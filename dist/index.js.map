{"version":3,"sources":["../src/index.js"],"names":["builder","ProductActions","HelpActions","BusinessActions","require","config","inMemoryStorage","MemoryBotStorage","connector","ChatConnector","appId","process","env","MICROSOFT_APP_ID","appPassword","MICROSOFT_APP_PASSWORD","bot","UniversalBot","localizerSettings","defaultLocale","set","server","restify","createServer","listen","PORT","console","log","post","LuisAppID","LUIS_APP_ID","LuisKey","LUIS_APP_KEY","LuisModel","recognizer","LuisRecognizer","dialog","SimpleDialog","session","result","message","attachments","text","send","HOISTED_LUIS_INTENTS","forEach","intent","locale","triggerAction","matches","args","store","entities","dispatch","requestInfo","shippingInfo","talkToHuman"],"mappings":"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","file":"index.js","sourcesContent":["// Bot-framework\nimport restify from 'restify';\nimport * as builder from 'botbuilder';\n// LUIS INTENTS\nimport HOISTED_LUIS_INTENTS from './constants/hoistedLuisIntents';\n// local Redux\nimport loadStore from './loadStore';\n// import * as DialogActions from './redux/actions/dialogActions';\nimport * as ProductActions from './redux/actions/productActions';\nimport * as HelpActions from './redux/actions/helpActions';\nimport * as BusinessActions from './redux/actions/businessActions';\n// DEV\nrequire('dotenv').config();\n\n// Setup in memory storage\nconst inMemoryStorage = new builder.MemoryBotStorage();\n// Create chat bot\nconst connector = new builder.ChatConnector({\n  appId: process.env.MICROSOFT_APP_ID || '',\n  appPassword: process.env.MICROSOFT_APP_PASSWORD || '',\n});\n\nconst bot = new builder.UniversalBot(connector, {\n  localizerSettings: {\n    defaultLocale: 'es',\n  },\n});\n\nbot.set('storage', inMemoryStorage); // Register in memory storage\n\n// Setting up the server\nconst server = restify.createServer();\nserver.listen(process.env.PORT || 3978, () => {\n  console.log(`Server listening to ${process.env.PORT || 3978}`);\n});\n\nserver.post('/api/messages', connector.listen());\n\n// =========================================================\n// Bot Recognizers\n// =========================================================\n\n// Your-LUIS-App-ID\nconst LuisAppID = process.env.LUIS_APP_ID;\n// Your-LUIS-Key\nconst LuisKey = process.env.LUIS_APP_KEY;\nconst LuisModel = `https://westus.api.cognitive.microsoft.com/luis/v2.0/apps/${LuisAppID}?subscription-key=${LuisKey}`;\nconst recognizer = new builder.LuisRecognizer(LuisModel);\n\nbot.recognizer(recognizer);\n\n// =========================================================\n// Dialogs\n// =========================================================\n\n// Default\nbot.dialog('/', new builder.SimpleDialog((session, result) => {\n  // Redux store setup\n  const { attachments, text } = session.message || {}; // What user sends\n  if (attachments || result || text) {\n    session.send('default_message');\n  }\n}));\n\nHOISTED_LUIS_INTENTS.forEach((intent) => {\n  bot.dialog(`/${intent.dialog}`,\n    (session) => {\n      session.send(intent.locale);\n    }).triggerAction({\n    matches: intent.matches,\n  });\n});\n\n// Product Information\nbot.dialog('ProductInfoDialog',\n  (session, args) => {\n    const store = loadStore(session);\n    const { attachments, text } = session.message || {}; // What user sends\n    const { entities } = args.intent;\n    if (attachments || text) {\n      store.dispatch(ProductActions.requestInfo(text, entities));\n    }\n  }).triggerAction({\n  matches: 'ProductInformation',\n});\n\n// Business Information\nbot.dialog('BusinessInfoDialog',\n  (session, args) => {\n    const store = loadStore(session);\n    const { attachments, text } = session.message || {}; // What user sends\n    const { entities } = args.intent;\n    if (attachments || text) {\n      store.dispatch(BusinessActions.requestInfo(text, entities));\n    }\n  }).triggerAction({\n  matches: 'RequestInfo',\n});\n\n// Shipping Information\nbot.dialog('ShippingDialog',\n  (session, args) => {\n    const store = loadStore(session);\n    const { attachments, text } = session.message || {}; // What user sends\n    const { entities } = args.intent;\n    if (attachments || text) {\n      store.dispatch(BusinessActions.shippingInfo(text, entities));\n    }\n  }).triggerAction({\n  matches: 'ShipingInfo',\n});\n\n// Request to talk to a human\nbot.dialog('TalkToHumanDialog',\n  (session, args) => {\n    const store = loadStore(session);\n    const { attachments, text } = session.message || {}; // What user sends\n    const { entities } = args.intent;\n    if (attachments || text) {\n      store.dispatch(HelpActions.talkToHuman(text, entities));\n    }\n  }).triggerAction({\n  matches: 'TalkToHuman',\n});\n"]}